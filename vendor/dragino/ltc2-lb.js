function decodeUplink(input) {\n return { \n data: Decode(input.fPort, input.bytes, input.variables)\n }; \n}\nfunction Decode(fPort, bytes, variables) {\n\nvar poll_message_status=(bytes[2]&0x40)>>6;\n\nvar decode = {};\n\ndecode.Ext= bytes[2]&0x0F;\ndecode.battery= ((bytes[0]<<8 | bytes[1]) & 0x3FFF)/1000;\n\nif(decode.Ext==0x01)\n{\n decode.temp_channel1=parseFloat(((bytes[3]<<24>>16 | bytes[4])/100).toFixed(2));\n decode.temp_channel2=parseFloat(((bytes[5]<<24>>16 | bytes[6])/100).toFixed(2));\n}\nelse if(decode.Ext==0x02)\n{\n decode.temp_channel1=parseFloat(((bytes[3]<<24>>16 | bytes[4])/10).toFixed(1));\n decode.temp_channel2=parseFloat(((bytes[5]<<24>>16 | bytes[6])/10).toFixed(1));\n}\nelse if(decode.Ext==0x03)\n{\n decode.Res_Channel1=parseFloat(((bytes[3]<<8 | bytes[4])/100).toFixed(2));\n decode.Res_Channel2=parseFloat(((bytes[5]<<8 | bytes[6])/100).toFixed(2));\n}\n\ndecode.Systimestamp=(bytes[7]<<24 | bytes[8]<<16 | bytes[9]<<8 | bytes[10] );\n\n\nif(poll_message_status===0)\n{\n if(bytes.length==11)\n {\n return decode;\n }\n}\n\n}