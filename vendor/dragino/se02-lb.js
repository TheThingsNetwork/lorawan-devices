function decodeUplink(input) {\n return { \n data: Decode(input.fPort, input.bytes, input.variables)\n }; \n}\nfunction Str1(str2){\n var str3 =\"\";\n for (var i=0;i<str2.length;i++){\n if (str2[i]<=0x0f){\n str2[i]=\"0\"+str2[i].toString(16)+\"\";\n }\n str3+= str2[i].toString(16)+\"\";}\n return str3;\n}\nfunction str_pad(byte){\n var zero = '00';\n var hex= byte.toString(16); \n var tmp = 2-hex.length;\n return zero.substr(0,tmp) + hex + \" \";\n}\n\n\nfunction datalog(i,bytes){\n var bb= parseFloat(((bytes[0+i]<<24>>16 | bytes[1+i])/100).toFixed(2));\n var cc= parseFloat(((bytes[2+i]<<24>>16 | bytes[3+i])/100).toFixed(2));\n var dd= parseFloat((bytes[4+i]<<8 | bytes[5+i]));\n \n var ff= parseFloat(((bytes[6+i]<<24>>16 | bytes[7+i])/100).toFixed(2));\n var gg= parseFloat(((bytes[8+i]<<24>>16 | bytes[9+i])/100).toFixed(2));\n var hh= parseFloat((bytes[10+i]<<8 | bytes[11+i]));\n \n var ee= getMyDate((bytes[13+i]<<24 | bytes[14+i]<<16 | bytes[15+i]<<8 | bytes[16+i]).toString(10));\n var string='['+bb+','+cc+','+dd+','+ff+','+gg+','+hh+','+ee+']'+','; \n \n return string;\n}\n\nfunction getzf(c_num){ \n if(parseInt(c_num) < 10)\n c_num = '0' + c_num; \n\n return c_num; \n}\n\nfunction getMyDate(str){ \n var c_Date;\n if(str > 9999999999)\n c_Date = new Date(parseInt(str));\n else \n c_Date = new Date(parseInt(str) * 1000);\n \n var c_Year = c_Date.getFullYear(), \n c_Month = c_Date.getMonth()+1, \n c_Day = c_Date.getDate(),\n c_Hour = c_Date.getHours(), \n c_Min = c_Date.getMinutes(), \n c_Sen = c_Date.getSeconds();\n var c_Time = c_Year +'-'+ getzf(c_Month) +'-'+ getzf(c_Day) +' '+ getzf(c_Hour) +':'+ getzf(c_Min) +':'+getzf(c_Sen); \n \n return c_Time;\n}\n\n\nfunction Decode(fPort, bytes, variables) {\n var data = {};\n var decode = {};\n var value;\n var mod=(bytes[16]>>7)&0x01;\n \n if(fPort==0x02)\n {\n decode.battery=((bytes[0]<<8 | bytes[1]) & 0x3FFF)/1000;//Battery,units:V\n\n var value=bytes[2]<<8 | bytes[3];\n if(bytes[2] & 0x80)\n {value |= 0xFFFF0000;}\n decode.temperature_pro=(value/10).toFixed(2);//DS18B20,temperature\n \n if(mod===0)\n {\n value=bytes[6]<<8 | bytes[7];\n var temp_soil;\n if((value & 0x8000)>>15 === 0)\n decode.temp_soil=(value/100).toFixed(2);//temp_soil,temperature\n else if((value & 0x8000)>>15 === 1)\n decode.temp_soil=((value-0xFFFF)/100).toFixed(2);\n\n decode.moisture_soil=((bytes[4]<<8 | bytes[5])/100).toFixed(2);//moisture_soil,Humidity,units:%\n decode.conduct_soil=bytes[8]<<8 | bytes[9];\n\n value=bytes[12]<<8 | bytes[13];\n var temp_soil2;\n if((value & 0x8000)>>15 === 0)\n decode.temp_soi2=(value/100).toFixed(2);//temp_soi2,temperature\n else if((value & 0x8000)>>15 === 1)\n decode.temp_soi2=((value-0xFFFF)/100).toFixed(2);\n\n decode.moisture_soil2=((bytes[10]<<8 | bytes[11])/100).toFixed(2);//moisture_soil2,Humidity,units:%\n decode.conduct_soil2=bytes[14]<<8 | bytes[15];\n }\n else\n { \n decode.Soil_dielectric_constant=((bytes[4]<<8 | bytes[5])/10).toFixed(1);\n decode.Raw_moisture_soil=bytes[6]<<8 | bytes[7];\n decode.Raw_conduct_soil=bytes[8]<<8 | bytes[9];\n \n decode.Soil_dielectric_constant2=((bytes[10]<<8 | bytes[11])/10).toFixed(1);\n decode.Raw_moisture_soil2=bytes[12]<<8 | bytes[13];\n decode.Raw_conduct_soil2=bytes[14]<<8 | bytes[15]; \n }\n decode.s_flag = (bytes[16]>>4)&0x01;\n decode.i_flag = bytes[16]&0x0F;\n decode.Mod = mod;\n return decode;\n }\n \n else if(fPort==3) \n {\n var pnack= ((bytes[12]>>7)&0x01) ? \"True\":\"False\";\n for(var i=0;i<bytes.length;i=i+17)\n {\n var data= datalog(i,bytes);\n if(i=='0')\n data_sum=data;\n else\n data_sum+=data;\n }\n return{\n DATALOG:data_sum,\n PNACKMD:pnack,\n }; \n }\nelse if(fPort==0x05)\n {\n var sub_band;\n var freq_band;\n var sensor;\n \n if(bytes[0]==0xF1)\n sensor= \"SE02-LB\";\n \n if(bytes[4]==0xff)\n sub_band=\"NULL\";\n else\n sub_band=bytes[4];\n \n if(bytes[3]==0x01)\n freq_band=\"EU868\";\n else if(bytes[3]==0x02)\n freq_band=\"US915\";\n else if(bytes[3]==0x03)\n freq_band=\"IN865\";\n else if(bytes[3]==0x04)\n freq_band=\"AU915\";\n else if(bytes[3]==0x05)\n freq_band=\"KZ865\";\n else if(bytes[3]==0x06)\n freq_band=\"RU864\";\n else if(bytes[3]==0x07)\n freq_band=\"AS923\";\n else if(bytes[3]==0x08)\n freq_band=\"AS923_1\";\n else if(bytes[3]==0x09)\n freq_band=\"AS923_2\";\n else if(bytes[3]==0x0A)\n freq_band=\"AS923_3\";\n else if(bytes[3]==0x0B)\n freq_band=\"CN470\";\n else if(bytes[3]==0x0C)\n freq_band=\"EU433\";\n else if(bytes[3]==0x0D)\n freq_band=\"KR920\";\n else if(bytes[3]==0x0E)\n freq_band=\"MA869\";\n \n var firm_ver= (bytes[1]&0x0f)+'.'+(bytes[2]>>4&0x0f)+'.'+(bytes[2]&0x0f);\n bat= (bytes[5]<<8 | bytes[6])/1000;\n return {\n SENSOR_MODEL:sensor,\n FIRMWARE_VERSION:firm_ver,\n FREQUENCY_BAND:freq_band,\n SUB_BAND:sub_band,\n battery:bat,\n };\n\n}\n\n }