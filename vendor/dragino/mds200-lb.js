function decodeUplink(input) {\n return { \n data: Decode(input.fPort, input.bytes, input.variables)\n }; \n}\nfunction datalog(i,bytes){\n var aa=(bytes[0+i]<<8 |bytes[1+i])/1000\n var bb=bytes[2+i]<<8 |bytes[3+i]\n var cc=bytes[4+i]<<8 |bytes[5+i]\n var dd=(bytes[6+i]&0x01)?\"YES\":\"NO\"; \n var ee=((bytes[6+i]>>1)&0x01)?\"TRUE\":\"FALSE\"; \n var ff=(bytes[6+i]&0x40)?\"1\":\"0\"; \n var gg= getMyDate((bytes[7+i]<<24 | bytes[8+i]<<16 | bytes[9+i]<<8 | bytes[10+i]).toString(10));\n var string='['+aa+','+bb+','+cc+','+dd+','+ee+','+ff+','+gg+']'+','; \n \n return string;\n}\n\nfunction getzf(c_num){ \n if(parseInt(c_num) < 10)\n c_num = '0' + c_num; \n\n return c_num; \n}\n\nfunction getMyDate(str){ \n var c_Date;\n if(str > 9999999999)\n c_Date = new Date(parseInt(str));\n else \n c_Date = new Date(parseInt(str) * 1000);\n \n var c_Year = c_Date.getFullYear(), \n c_Month = c_Date.getMonth()+1, \n c_Day = c_Date.getDate(),\n c_Hour = c_Date.getHours(), \n c_Min = c_Date.getMinutes(), \n c_Sen = c_Date.getSeconds();\n var c_Time = c_Year +'-'+ getzf(c_Month) +'-'+ getzf(c_Day) +' '+ getzf(c_Hour) +':'+ getzf(c_Min) +':'+getzf(c_Sen); \n \n return c_Time;\n}\nfunction Decode(fPort, bytes, variables) {\n var bat;\n if(fPort == 2)\n {\n value = (bytes[0]<<8 | bytes[1]);\n bat = value/1000;\n value = (bytes[2]<<8 | bytes[3]);\n var dis1 = value;\n value = (bytes[4]<<8 | bytes[5]);\n var dis2 =value;\n var dalarm_count = (bytes[6]>>2)&0x3F;\n var distance_alarm = (bytes[6]>>1)&0x01;\n var inter_alarm = (bytes[6])&0x01;\n return {\n battery:bat,\n distance1:dis1,\n distance2:dis2,\n dalarm_count:dalarm_count,\n distance_alarm:distance_alarm,\n interrupt_alarm:inter_alarm\n };\n }\n if(fPort==0x03)\n {\n var pnack= ((bytes[0]>>7)&0x01) ? \"True\":\"False\";\n for(var i=0;i<bytes.length;i=i+11)\n {\n var data= datalog(i,bytes);\n if(i=='0')\n data_sum=data;\n else\n data_sum+=data;\n }\n return{\n DATALOG:data_sum,\n PNACKMD:pnack,\n };\n }\n else if(fPort == 5)\n {\n var model=\"\";\n if(bytes[0]==0x2B)\n model=\"MDS200-LB\";\n var version=(bytes[1]<<8 | bytes[2]).toString(16);\n version = parseInt(version,10);\n var fre_band=\"\";\n switch(bytes[3])\n {\n case 0x01:fre_band=\"EU868\";break;\n case 0x02:fre_band=\"US915\";break;\n case 0x03:fre_band=\"IN865\";break;\n case 0x04:fre_band=\"AU915\";break;\n case 0x05:fre_band=\"KZ865\";break;\n case 0x06:fre_band=\"RU864\";break;\n case 0x07:fre_band=\"AS923\";break;\n case 0x08:fre_band=\"AS923-1\";break;\n case 0x09:fre_band=\"AS923-2\";break;\n case 0x0a:fre_band=\"AS923-3\";break;\n case 0x0b:fre_band=\"CN470\";break;\n case 0x0c:fre_band=\"EU433\";break;\n case 0x0d:fre_band=\"KR920\";break;\n case 0x0e:fre_band=\"MA869\";break;\n }\n var sub_band = bytes[4];\n bat = (bytes[5]<<8 | bytes[6])/1000;\n \n return {\n Sensor_model:model,\n Ver:version,\n Fre_band:fre_band,\n Sub_band:sub_band,\n battery:bat\n };\n }\n else if(fPort == 4)\n {\n var tdc = (bytes[0]<<16 | bytes[1]<<8 | bytes[2]);\n var atdc = (bytes[3]);\n var alarm_min = (bytes[4]<<8 | bytes[5]);\n var alarm_max = (bytes[6]<<8 | bytes[7]);\n var input = (bytes[8]);\n return {\n tdc:tdc,\n atdc:atdc,\n alarm_min:alarm_min,\n alarm_max:alarm_max,\n interrupt:input\n };\n }\n}\n