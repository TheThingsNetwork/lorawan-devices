function decodeUplink(input) {\n return { \n data: Decode(input.fPort, input.bytes, input.variables)\n }; \n}\nfunction Decode(fPort, bytes, variables) {\nif(fPort==0x02)\n{\n var decode = {};\n var mode=(bytes[6] & 0x7C)>>2;\n \n if((mode!=2)&&(mode!=6)&&(mode!=7)&&(mode!=8))\n decode.Digital_IStatus= (bytes[6] & 0x02)? \"H\":\"L\";\n \n if(mode!=2)\n {\n decode.battery= (bytes[0]<<8 | bytes[1])/1000;\n if((bytes[2]==0x7f)&&(bytes[3]==0xff))\n decode.temperature1= \"NULL\";\n else\n decode.temperature= parseFloat(((bytes[2]<<24>>16 | bytes[3])/10).toFixed(1));\n if(mode!=8)\n decode.adc1_v= (bytes[4]<<8 | bytes[5])/1000;\n }\n \n if((mode!=5)&&(mode!=6))\n {\n decode.exti_trigger= (bytes[6] & 0x01)? \"TRUE\":\"FALSE\";\n decode.door_status= (bytes[6] & 0x80)? \"CLOSE\":\"OPEN\";\n }\n \n if(mode=='0')\n {\n decode.Work_mode=\"IIC\";\n if((bytes[9]<<8 | bytes[10])===0)\n decode.Illum= (bytes[7]<<8 | bytes[8]);\n else \n {\n if(((bytes[7]==0x7f)&&(bytes[8]==0xff))||((bytes[7]==0xff)&&(bytes[8]==0xff)))\n decode.temperature= \"NULL\";\n else\n decode.temperature= parseFloat(((bytes[7]<<24>>16 | bytes[8])/10).toFixed(1));\n \n if((bytes[9]==0xff)&&(bytes[10]==0xff))\n decode.humidity= \"NULL\";\n else\n decode.humidity= parseFloat(((bytes[9]<<8 | bytes[10])/10).toFixed(1));\n }\n }\n else if(mode=='1')\n {\n decode.Work_mode=\"Distance\";\n\n if((bytes[7]===0x00)&&(bytes[8]===0x00))\n decode.distance= \"NULL\";//distance_cm\n else\n decode.distance= parseFloat(((bytes[7]<<8 | bytes[8])/10).toFixed(1));//distance_cm\n \n if(!((bytes[9]==0xff)&&(bytes[10]==0xff)))\n decode.distance_signal_strength= (bytes[9]<<8 | bytes[10]);\n }\n else if(mode=='2')\n {\n decode.Work_mode=\"3ADC+IIC\";\n decode.battery= bytes[11]/10;\n decode.adc1_v= (bytes[0]<<8 | bytes[1])/1000;\n decode.adc2_v= (bytes[2]<<8 | bytes[3])/1000;\n decode.adc3_v= (bytes[4]<<8 | bytes[5])/1000;\n if((bytes[9]<<8 | bytes[10])===0)\n decode.Illum= (bytes[7]<<8 | bytes[8]);\n else \n {\n if(((bytes[7]==0x7f)&&(bytes[8]==0xff))||((bytes[7]==0xff)&&(bytes[8]==0xff)))\n decode.temperature= \"NULL\";\n else\n decode.temperature= parseFloat(((bytes[7]<<24>>16 | bytes[8])/10).toFixed(1));\n \n if((bytes[9]==0xff)&&(bytes[10]==0xff))\n decode.humidity= \"NULL\";\n else\n decode.humidity= parseFloat(((bytes[9]<<8 | bytes[10])/10).toFixed(1));\n }\n }\n else if(mode=='3')\n {\n decode.Work_mode=\"3DS18B20\";\n if((bytes[7]==0x7f)&&(bytes[8]==0xff))\n decode.temperature2= \"NULL\";\n else \n decode.temperature2= parseFloat(((bytes[7]<<24>>16 | bytes[8])/10).toFixed(1));\n \n if((bytes[9]==0x7f)&&(bytes[10]==0xff))\n decode.temperature3= \"NULL\"; \n else\n decode.temperature3= parseFloat(((bytes[9]<<24>>16 | bytes[10])/10).toFixed(1));\n }\n else if(mode=='4')\n {\n decode.Work_mode=\"Weight\";\n decode.weight= (bytes[9]<<24 | bytes[10]<<16 | bytes[7]<<8 | bytes[8]);\n }\n else if(mode=='5')\n {\n decode.Work_mode=\"1Count\";\n decode.count= (bytes[7]<<24 | bytes[8]<<16 | bytes[9]<<8 | bytes[10])>>>0;\n }\n else if(mode=='6')\n {\n decode.Work_mode=\"3Interrupt\";\n decode.EXTI1_Trigger= (bytes[6] & 0x01)? \"TRUE\":\"FALSE\"; \n decode.EXTI1_Status= (bytes[6] & 0x80)? \"CLOSE\":\"OPEN\"; \n decode.EXTI2_Trigger= (bytes[7] & 0x10)? \"TRUE\":\"FALSE\";\n decode.EXTI2_Status= (bytes[7] & 0x01)? \"CLOSE\":\"OPEN\"; \n decode.EXTI3_Trigger= (bytes[8] & 0x10)? \"TRUE\":\"FALSE\";\n decode.EXTI3_Status= (bytes[8] & 0x01)? \"CLOSE\":\"OPEN\";\n }\n else if(mode=='7')\n {\n decode.Work_mode=\"3ADC+1DS18B20\";\n decode.adc2= (bytes[7]<<8 | bytes[8])/1000;\n decode.adc3= (bytes[9]<<8 | bytes[10])/1000; \n }\n else if(mode=='8')\n {\n decode.Work_mode=\"3DS18B20+2Count\";\n if((bytes[4]==0x7f)&&(bytes[5]==0xff))\n decode.temperature2= \"NULL\";\n else \n decode.temperature2= parseFloat(((bytes[4]<<24>>16 | bytes[5])/10).toFixed(1));\n \n if((bytes[7]==0x7f)&&(bytes[8]==0xff))\n decode.temperature3= \"NULL\"; \n else\n decode.temperature3= parseFloat(((bytes[7]<<24>>16 | bytes[8])/10).toFixed(1));\n \n decode.count1= (bytes[9]<<24 | bytes[10]<<16 | bytes[11]<<8 | bytes[12])>>>0;\n decode.count2= (bytes[13]<<24 | bytes[14]<<16 | bytes[15]<<8 | bytes[16])>>>0;\n }\n \n if(bytes.length!=1)\n return decode;\n }\n \n else if(fPort==5)\n {\n var freq_band;\n var sub_band;\n var sensor;\n \n if(bytes[0]==0x1C)\n sensor= \"SN50_v3-LB\";\n \n var firm_ver= (bytes[1]&0x0f)+'.'+(bytes[2]>>4&0x0f)+'.'+(bytes[2]&0x0f);\n \n if(bytes[3]==0x01)\n freq_band=\"EU868\";\n else if(bytes[3]==0x02)\n freq_band=\"US915\";\n else if(bytes[3]==0x03)\n freq_band=\"IN865\";\n else if(bytes[3]==0x04)\n freq_band=\"AU915\";\n else if(bytes[3]==0x05)\n freq_band=\"KZ865\";\n else if(bytes[3]==0x06)\n freq_band=\"RU864\";\n else if(bytes[3]==0x07)\n freq_band=\"AS923\";\n else if(bytes[3]==0x08)\n freq_band=\"AS923_1\";\n else if(bytes[3]==0x09)\n freq_band=\"AS923_2\";\n else if(bytes[3]==0x0A)\n freq_band=\"AS923_3\";\n else if(bytes[3]==0x0F)\n freq_band=\"AS923_4\";\n else if(bytes[3]==0x0B)\n freq_band=\"CN470\";\n else if(bytes[3]==0x0C)\n freq_band=\"EU433\";\n else if(bytes[3]==0x0D)\n freq_band=\"KR920\";\n else if(bytes[3]==0x0E)\n freq_band=\"MA869\";\n \n if(bytes[4]==0xff)\n sub_band=\"NULL\";\n else\n sub_band=bytes[4];\n\n var bat= (bytes[5]<<8 | bytes[6])/1000;\n \n return {\n SENSOR_MODEL:sensor,\n FIRMWARE_VERSION:firm_ver,\n FREQUENCY_BAND:freq_band,\n SUB_BAND:sub_band,\n battery:bat,\n }\n }\n}\n