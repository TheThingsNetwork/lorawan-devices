function decodeUplink(input) {\n return { \n data: Decode(input.fPort, input.bytes, input.variables)\n }; \n}\nfunction datalog(i,bytes){\n var aa=(bytes[0+i]<<8 |bytes[1+i])/1000\n var bb=bytes[2+i]<<8 |bytes[3+i]\n var cc=bytes[4+i]<<8 |bytes[5+i]\n var dd=((bytes[6+i]>>1)&0x01)?\"TRUE\":\"FALSE\"; \n var ee=(bytes[6+i]&0x40)?\"1\":\"0\"; \n var ff= getMyDate((bytes[7+i]<<24 | bytes[8+i]<<16 | bytes[9+i]<<8 | bytes[10+i]).toString(10));\n var string='['+aa+','+bb+','+cc+','+dd+','+ee+','+ff+']'+','; \n \n return string;\n}\n\nfunction getzf(c_num){ \n if(parseInt(c_num) < 10)\n c_num = '0' + c_num; \n\n return c_num; \n}\n\nfunction getMyDate(str){ \n var c_Date;\n if(str > 9999999999)\n c_Date = new Date(parseInt(str));\n else \n c_Date = new Date(parseInt(str) * 1000);\n \n var c_Year = c_Date.getFullYear(), \n c_Month = c_Date.getMonth()+1, \n c_Day = c_Date.getDate(),\n c_Hour = c_Date.getHours(), \n c_Min = c_Date.getMinutes(), \n c_Sen = c_Date.getSeconds();\n var c_Time = c_Year +'-'+ getzf(c_Month) +'-'+ getzf(c_Day) +' '+ getzf(c_Hour) +':'+ getzf(c_Min) +':'+getzf(c_Sen); \n \n return c_Time;\n}\nfunction Decode(fPort, bytes, variables) {\n \n if(fPort == 2)\n {\n var bat;\n var value=(bytes[0]<<8 | bytes[1]) & 0x3FFF;\n var batV=value/1000;//Battery,units:V\n \n var distance = 0;\n value=bytes[2]<<8 | bytes[3];\n if(value==0x3FFF)\n distance = \"Invalid Reading\"; \n else\n distance=(value);//distance,units:mm \n \n var i_flag =(bytes[4])&0x01; \n value=bytes[5]<<8 | bytes[6];\n if(bytes[5] & 0x80)\n {value |= 0xFFFF0000;}\n var temp_DS18B20=(value/10).toFixed(2);//DS18B20,temperature\n var s_flag = (bytes[7])&0x01;\n return {\n battery:batV ,\n temperature_pro:temp_DS18B20,\n distance:distance,\n sensor_flag:s_flag,\n interrupt_flag:i_flag\n };\n }\n if(fPort==0x03)\n {\n var pnack= ((bytes[0]>>7)&0x01) ? \"True\":\"False\";\n for(var i=0;i<bytes.length;i=i+11)\n {\n var data= datalog(i,bytes);\n if(i=='0')\n data_sum=data;\n else\n data_sum+=data;\n }\n return{\n DATALOG:data_sum,\n PNACKMD:pnack,\n };\n }\n else if(fPort==0x04)\n {\n var tdc= bytes[0]<<16 | bytes[1]<<8 | bytes[2];\n var stop_timer= bytes[4];\n var alarm_timer= bytes[5]<<8 | bytes[6];\n \n return {\n tdc:tdc,\n stop_timer:stop_timer,\n alarm_timer:alarm_timer,\n };\n }\nelse if(fPort==0x05)\n {\n var sub_band;\n var freq_band;\n var sensor;\n \n if(bytes[0]==0x2A)\n sensor= \"MDS120-LB\";\n \n if(bytes[4]==0xff)\n sub_band=\"NULL\";\n else\n sub_band=bytes[4];\n \n if(bytes[3]==0x01)\n freq_band=\"EU868\";\n else if(bytes[3]==0x02)\n freq_band=\"US915\";\n else if(bytes[3]==0x03)\n freq_band=\"IN865\";\n else if(bytes[3]==0x04)\n freq_band=\"AU915\";\n else if(bytes[3]==0x05)\n freq_band=\"KZ865\";\n else if(bytes[3]==0x06)\n freq_band=\"RU864\";\n else if(bytes[3]==0x07)\n freq_band=\"AS923\";\n else if(bytes[3]==0x08)\n freq_band=\"AS923_1\";\n else if(bytes[3]==0x09)\n freq_band=\"AS923_2\";\n else if(bytes[3]==0x0A)\n freq_band=\"AS923_3\";\n else if(bytes[3]==0x0B)\n freq_band=\"CN470\";\n else if(bytes[3]==0x0C)\n freq_band=\"EU433\";\n else if(bytes[3]==0x0D)\n freq_band=\"KR920\";\n else if(bytes[3]==0x0E)\n freq_band=\"MA869\";\n \n var firm_ver= (bytes[1]&0x0f)+'.'+(bytes[2]>>4&0x0f)+'.'+(bytes[2]&0x0f);\n bat= (bytes[5]<<8 | bytes[6])/1000;\n \n return {\n SENSOR_MODEL:sensor,\n FIRMWARE_VERSION:firm_ver,\n FREQUENCY_BAND:freq_band,\n SUB_BAND:sub_band,\n battery:bat,\n };\n }\n\n}